package handlers

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/database"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/fetcher"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/utils"
)

// handleFavorites –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ".
func (h *Handler) handleFavorites(ctx context.Context, user *database.User, chatID int64) {
	h.sendMsg(chatID, "üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")

	// –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	favorites, err := h.scheduler.GetUserFavoriteArticles(ctx, user.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: %v", err)
		h.sendMsg(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if len(favorites) == 0 {
		h.sendMsg(chatID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –ø–æ–¥ –Ω–æ–≤–æ—Å—Ç—å—é.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
	h.sendMsg(chatID, fmt.Sprintf("üìö –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (%d):", len(favorites)))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∏–∑–±—Ä–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
	for _, favorite := range favorites {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
		publishedDate := favorite.PublishedAt.Format("02.01.2006 15:04")

		// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
		title := h.sanitizeText(favorite.Title)
		source := h.sanitizeText(favorite.Source)

		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ—Å—Ç–∏
		messageText := fmt.Sprintf(
			"<b>%s</b>\n\n"+
				"<i>–ò—Å—Ç–æ—á–Ω–∏–∫: %s</i>\n"+
				"<i>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: %s</i>\n\n"+
				"<a href=\"%s\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>",
			title,
			source,
			publishedDate,
			favorite.ArticleURL,
		)

		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ URL
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
		urlLen := len(favorite.ArticleURL)
		shortID := favorite.ArticleURL
		if urlLen > 10 {
			shortID = favorite.ArticleURL[urlLen-10:]
		}

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "rm_fav_"+shortID),
			),
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		msg := tgbotapi.NewMessage(chatID, messageText)
		msg.ParseMode = tgbotapi.ModeHTML
		msg.DisableWebPagePreview = false
		msg.ReplyMarkup = keyboard

		if _, err := h.bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: %v", err)
		}
	}
}

// handleAddToFavorites –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
func (h *Handler) handleAddToFavorites(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–∞–µ–º URL —Å—Ç–∞—Ç—å–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
	var articleURL string
	if strings.HasPrefix(callback.Data, "add_fav_") {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
		shortID := callback.Data[len("add_fav_"):]

		// –ò—â–µ–º –ø–æ–ª–Ω—ã–π URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
		// –ò—â–µ–º –≤ entities —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é
		for _, entity := range callback.Message.Entities {
			if entity.Type == "text_link" {
				// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ —ç—Ç–æ –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é
				articleURL = entity.URL
				break
			}
		}

		if articleURL == "" {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: %s", shortID)
			h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
			return
		}
	} else {
		// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–Ω—ã–º URL
		articleURL = callback.Data[len("add_favorite_"):]
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.getOrCreateUser(callback.From)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
	isFavorite, err := h.scheduler.IsFavoriteArticle(ctx, user.ID, articleURL)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏: %v", err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	if isFavorite {
		h.answerCallback(callback, "–≠—Ç–∞ —Å—Ç–∞—Ç—å—è —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
	messageText := callback.Message.Text
	messageEntities := callback.Message.Entities

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
	title := messageText
	if len(messageText) > 50 {
		title = messageText[:50] + "..."
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	source := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
	for _, entity := range messageEntities {
		if entity.Type == "text_link" && entity.URL == articleURL {
			source = messageText[entity.Offset : entity.Offset+entity.Length]
			break
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
	article := fetcher.Article{
		URL:         articleURL,
		Title:       title,
		Source:      fetcher.Source{Name: source},
		PublishedAt: time.Now(),
	}

	if err := h.scheduler.AddFavoriteArticle(ctx, user.ID, article); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: %v", err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è URL —Å—Ç–∞—Ç—å–∏
	shortID := utils.CreateShortID(articleURL)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è—è –∫–Ω–æ–ø–∫—É "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –Ω–∞ "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "rm_fav_"+shortID),
		),
	)

	editMsg := tgbotapi.NewEditMessageReplyMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		keyboard,
	)

	if _, err := h.bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: %v", err)
	}

	h.answerCallback(callback, "‚úÖ –°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
}

// handleRemoveFromFavorites –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.
func (h *Handler) handleRemoveFromFavorites(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
	var articleID string

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback
	if strings.HasPrefix(callback.Data, "rm_fav_") {
		// –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
		articleID = callback.Data[len("rm_fav_"):]
	} else if strings.HasPrefix(callback.Data, "remove_favorite_") {
		// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–Ω—ã–º URL
		articleID = callback.Data[len("remove_favorite_"):]
	} else {
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback: %s", callback.Data)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.getOrCreateUser(callback.From)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	// –ï—Å–ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π URL —Å—Ç–∞—Ç—å–∏
	if strings.HasPrefix(callback.Data, "rm_fav_") {
		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		favorites, err := h.scheduler.GetUserFavoriteArticles(ctx, user.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: %v", err)
			h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
			return
		}

		// –ò—â–µ–º —Å—Ç–∞—Ç—å—é –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
		found := false
		for _, favorite := range favorites {
			urlLen := len(favorite.ArticleURL)
			shortID := favorite.ArticleURL
			if urlLen > 10 {
				shortID = favorite.ArticleURL[urlLen-10:]
			}

			if shortID == articleID {
				// –ù–∞—à–ª–∏ —Å—Ç–∞—Ç—å—é, —É–¥–∞–ª—è–µ–º –µ–µ –ø–æ –ø–æ–ª–Ω–æ–º—É URL
				articleID = favorite.ArticleURL
				found = true
				break
			}
		}

		if !found {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å—é –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É: %s", articleID)
			h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
			return
		}
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—å—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
	if err := h.scheduler.RemoveFavoriteArticle(ctx, user.ID, articleID); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: %v", err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
		return
	}

	// –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if callback.Message.ReplyMarkup != nil && len(callback.Message.ReplyMarkup.InlineKeyboard) > 0 {
		data := callback.Message.ReplyMarkup.InlineKeyboard[0][0].CallbackData
		if data != nil && len(*data) > len("remove_favorite_") && (*data)[:len("remove_favorite_")] == "remove_favorite_" {
			deleteMsg := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
			if _, err := h.bot.Send(deleteMsg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
			h.answerCallback(callback, "‚úÖ –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
			return
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è—è –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" –Ω–∞ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "add_favorite_"+articleID),
		),
	)

	editMsg := tgbotapi.NewEditMessageReplyMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		keyboard,
	)

	if _, err := h.bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: %v", err)
	}

	h.answerCallback(callback, "‚úÖ –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
}

package handlers

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/database"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/fetcher"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/utils"
)

const (
	StateDefault             = ""
	StateAwaitingTopic       = "awaiting_topic"
	StateAwaitingSearchQuery = "awaiting_search_query"
	StateViewingFavorites    = "viewing_favorites"
)

// Scheduler is an interface that the scheduler must implement.
// This avoids a circular dependency.
type Scheduler interface {
	ProcessUser(ctx context.Context, user database.User, force bool) int
	FetchNewsForTopic(ctx context.Context, topic string) ([]fetcher.Article, error)
	SearchNews(ctx context.Context, query string) ([]fetcher.Article, error)
	IsArticleSent(ctx context.Context, userID uint, articleURL string) (bool, error)
	MarkArticleAsSent(ctx context.Context, userID uint, articleURL string) error
	ResetSentArticlesHistory(ctx context.Context, userID uint) error
	AddFavoriteArticle(ctx context.Context, userID uint, article fetcher.Article) error
	RemoveFavoriteArticle(ctx context.Context, userID uint, articleURL string) error
	GetUserFavoriteArticles(ctx context.Context, userID uint) ([]database.FavoriteArticle, error)
	IsFavoriteArticle(ctx context.Context, userID uint, articleURL string) (bool, error)
}

// Handler processes incoming updates from Telegram
// and manages the bot's state.
type Handler struct {
	bot       *tgbotapi.BotAPI
	userRepo  database.UserRepository
	subRepo   database.SubscriptionRepository
	scheduler Scheduler
}

// NewHandler creates a new handler instance.
func NewHandler(bot *tgbotapi.BotAPI, userRepo database.UserRepository, subRepo database.SubscriptionRepository, scheduler Scheduler) *Handler {
	return &Handler{
		bot:       bot,
		userRepo:  userRepo,
		subRepo:   subRepo,
		scheduler: scheduler,
	}
}

// HandleUpdate is the main handler for incoming updates.
func (h *Handler) HandleUpdate(update tgbotapi.Update) {
	switch {
	case update.Message != nil:
		h.handleMessage(update.Message)
	case update.CallbackQuery != nil:
		h.handleCallbackQuery(update.CallbackQuery)
	}
}

// handleMessage processes all incoming messages (commands and text).
func (h *Handler) handleMessage(msg *tgbotapi.Message) {
	user, err := h.getOrCreateUser(msg.From)
	if err != nil {
		log.Printf("Error getting or creating user: %v", err)
		return
	}

	if msg.IsCommand() {
		h.handleCommand(msg, user)
		return
	}

	h.handleTextMessage(msg, user)
}

// getOrCreateUser finds a user in the DB or creates a new one.
func (h *Handler) getOrCreateUser(from *tgbotapi.User) (*database.User, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	return h.userRepo.FindOrCreateUser(ctx, from.ID, from.UserName, from.FirstName, from.LastName)
}

// handleCommand processes bot commands.
func (h *Handler) handleCommand(msg *tgbotapi.Message, user *database.User) {
	ctx := context.Background()
	command := msg.Command()
	topic := strings.TrimSpace(msg.CommandArguments())

	switch command {
	case "start":
		h.handleStart(msg.Chat.ID)
	case "help":
		h.handleHelp(msg.Chat.ID)
	case "subscribe":
		if topic != "" {
			h.handleSubscribe(user, topic, msg.Chat.ID)
		} else {
			h.setUserState(ctx, user.ID, StateAwaitingTopic, msg.Chat.ID)
			h.sendMsg(msg.Chat.ID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
		}
	case "unsubscribe":
		if topic != "" {
			h.handleUnsubscribeCommand(ctx, user, topic, msg.Chat.ID)
		} else {
			h.handleUnsubscribeButton(ctx, user, msg.Chat.ID)
		}
	case "subscriptions":
		h.handleSubscriptionsList(ctx, user, msg.Chat.ID)
	case "settings":
		h.handleSettings(msg.Chat.ID)
	default:
		h.sendMsg(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

// handleTextMessage processes text messages and button clicks.
func (h *Handler) handleTextMessage(msg *tgbotapi.Message, user *database.User) {
	ctx := context.Background()

	// First, check the user's state.
	switch user.State {
	case StateAwaitingTopic:
		h.handleSubscribe(user, msg.Text, msg.Chat.ID)
		h.setUserState(ctx, user.ID, StateDefault, msg.Chat.ID) // Reset state
		return
	case StateAwaitingSearchQuery:
		h.handleSearchNewsQuery(ctx, user, msg.Text, msg.Chat.ID)
		h.setUserState(ctx, user.ID, StateDefault, msg.Chat.ID) // Reset state
		return
	}

	// Then, handle button text.
	switch msg.Text {
	case "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
		h.setUserState(ctx, user.ID, StateAwaitingTopic, msg.Chat.ID)
		h.sendMsg(msg.Chat.ID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
	case "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
		h.handleUnsubscribeButton(ctx, user, msg.Chat.ID)
	case "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
		h.handleSubscriptionsList(ctx, user, msg.Chat.ID)
	case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		h.handleSettings(msg.Chat.ID)
	case "üì∞ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
		h.handleGetNewsNow(user)
	case "üìÉ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º":
		h.handleNewsByTopics(ctx, user, msg.Chat.ID)
	case "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
		h.handleResetHistory(ctx, user, msg.Chat.ID)
	case "üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π":
		h.handleSearchNews(ctx, user, msg.Chat.ID)
	case "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
		h.handleFavorites(ctx, user, msg.Chat.ID)
	case "‚ùì –ü–æ–º–æ—â—å":
		h.handleHelp(msg.Chat.ID)
	default:
		h.sendMsg(msg.Chat.ID, "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /help.")
	}
}

// --- Helper functions for commands and buttons ---

func (h *Handler) handleStart(chatID int64) {
	text := "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n" +
		"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º —Ç–µ–±—è —Ç–µ–º–∞–º.\n\n" +
		"üëá –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
	h.sendMsg(chatID, text, h.createMainKeyboard())
}

func (h *Handler) handleHelp(chatID int64) {
	helpText := "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:*\n\n" +
		"*/start* - ‚ú® –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n" +
		"*/subscribe <—Ç–µ–º–∞>* - ‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏\n" +
		"*/unsubscribe <—Ç–µ–º–∞>* - ‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π\n" +
		"*/subscriptions* - üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n" +
		"*/settings* - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π\n" +
		"*/help* - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
		"*–ö–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:*\n" +
		"üì∞ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º\n" +
		"üìÉ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º - –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π\n" +
		"üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n" +
		"üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π - –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É\n" +
		"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n" +
		"üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n" +
		"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n" +
		"*–°–æ–≤–µ—Ç—ã:*\n" +
		"- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º'\n" +
		"- –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π' –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–ø—Ä–æ—Å"
	h.sendMsg(chatID, helpText)
}

func (h *Handler) handleGetNewsNow(user *database.User) {
	h.sendMsg(user.TelegramID, "üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
	go func() {
		processCtx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)
		defer cancel()
		newsSent := h.scheduler.ProcessUser(processCtx, *user, true)
		if newsSent == 0 {
			h.sendMsg(user.TelegramID, "üîç –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
		}
	}()
}

func (h *Handler) handleSubscribe(user *database.User, topic string, chatID int64) {
	topic = strings.TrimSpace(topic)
	if topic == "" {
		h.sendMsg(chatID, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}
	topic = strings.ToLower(topic)
	if err := h.subRepo.AddSubscription(context.Background(), user.ID, topic); err != nil {
		h.sendMsg(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ '%s'. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.", topic))
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		return
	}
	h.sendMsg(chatID, fmt.Sprintf("üëç –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–µ–º—É: *%s*", topic))
}

func (h *Handler) handleUnsubscribeCommand(ctx context.Context, user *database.User, topic string, chatID int64) {
	topic = strings.ToLower(strings.TrimSpace(topic))
	if err := h.subRepo.RemoveSubscription(ctx, user.ID, topic); err != nil {
		h.sendMsg(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç '%s'. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç–µ–º—É.", topic))
		return
	}
	h.sendMsg(chatID, fmt.Sprintf("üóë –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã: *%s*", topic))
}

func (h *Handler) handleUnsubscribeButton(ctx context.Context, user *database.User, chatID int64) {
	topics, err := h.subRepo.GetUserSubscriptions(ctx, user.ID)
	if err != nil {
		log.Printf("Failed to get user subscriptions: %v", err)
		h.sendMsg(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}
	if len(topics) == 0 {
		h.sendMsg(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
		return
	}
	h.sendMsg(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:", h.createUnsubscribeKeyboard(topics))
}

func (h *Handler) handleSubscriptionsList(ctx context.Context, user *database.User, chatID int64) {
	topics, err := h.subRepo.GetUserSubscriptions(ctx, user.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: %v", err)
		h.sendMsg(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫.")
		return
	}
	if len(topics) == 0 {
		h.sendMsg(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. ü§∑‚Äç‚ôÇÔ∏è\n\n–ù–∞–∂–º–∏—Ç–µ '‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç–µ–º—É!")
	} else {
		var builder strings.Builder
		builder.WriteString("üìÑ *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n")
		for _, topic := range topics {
			builder.WriteString(fmt.Sprintf("‚Ä¢ %s\n", topic))
		}
		h.sendMsg(chatID, builder.String())
	}
}

func (h *Handler) handleSettings(chatID int64) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", "settings_interval"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π", "settings_news_limit"),
		),
	)
	h.sendMsg(chatID, text, keyboard)
}

// --- Callback Handlers ---

func (h *Handler) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	switch {
	case callback.Data == "settings_interval":
		h.handleIntervalSettings(callback)
	case callback.Data == "settings_news_limit":
		h.handleNewsLimitSettings(callback)
	case callback.Data == "settings_back":
		h.handleSettings(callback.Message.Chat.ID)
		h.answerCallback(callback, "")
	case strings.HasPrefix(callback.Data, "interval_"):
		h.handleIntervalCallback(callback)
	case strings.HasPrefix(callback.Data, "news_limit_"):
		h.handleNewsLimitCallback(callback)
	case strings.HasPrefix(callback.Data, "unsubscribe_"):
		h.handleUnsubscribeCallback(callback)
	case strings.HasPrefix(callback.Data, "topic_news_"):
		h.handleTopicNewsCallback(callback)
	case strings.HasPrefix(callback.Data, "add_favorite_") || strings.HasPrefix(callback.Data, "add_fav_"):
		h.handleAddToFavorites(ctx, callback)
	case strings.HasPrefix(callback.Data, "remove_favorite_") || strings.HasPrefix(callback.Data, "rm_fav_"):
		h.handleRemoveFromFavorites(ctx, callback)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (h *Handler) handleIntervalSettings(callback *tgbotapi.CallbackQuery) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ —á–∞—Å", "interval_60"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ 3 —á–∞—Å–∞", "interval_180"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ 6 —á–∞—Å–æ–≤", "interval_360"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ –¥–µ–Ω—å", "interval_1440"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "settings_back"),
		),
	)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)

	if _, err := h.bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	h.answerCallback(callback, "")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
func (h *Handler) handleNewsLimitSettings(callback *tgbotapi.CallbackQuery) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3 –Ω–æ–≤–æ—Å—Ç–∏", "news_limit_3"),
			tgbotapi.NewInlineKeyboardButtonData("5 –Ω–æ–≤–æ—Å—Ç–µ–π", "news_limit_5"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("10 –Ω–æ–≤–æ—Å—Ç–µ–π", "news_limit_10"),
			tgbotapi.NewInlineKeyboardButtonData("15 –Ω–æ–≤–æ—Å—Ç–µ–π", "news_limit_15"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "settings_back"),
		),
	)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)

	if _, err := h.bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	h.answerCallback(callback, "")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
func (h *Handler) handleIntervalCallback(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	user, err := h.getOrCreateUser(callback.From)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", callback.From.ID, err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	intervalStr := strings.TrimPrefix(callback.Data, "interval_")
	interval, _ := strconv.Atoi(intervalStr)
	if err := h.userRepo.UpdateUserNotificationInterval(ctx, user.ID, uint(interval)); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.ID, err)
		h.answerCallback(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
		return
	}

	responseText := fmt.Sprintf("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %d –º–∏–Ω—É—Ç.", interval)
	h.answerCallback(callback, responseText)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
	h.handleSettings(callback.Message.Chat.ID)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
func (h *Handler) handleNewsLimitCallback(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	user, err := h.getOrCreateUser(callback.From)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", callback.From.ID, err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	limitStr := strings.TrimPrefix(callback.Data, "news_limit_")
	limit, _ := strconv.Atoi(limitStr)
	if err := h.userRepo.UpdateUserNewsLimit(ctx, user.ID, uint(limit)); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.ID, err)
		h.answerCallback(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
		return
	}

	responseText := fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %d.", limit)
	h.answerCallback(callback, responseText)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
	h.handleSettings(callback.Message.Chat.ID)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º"
func (h *Handler) handleNewsByTopics(ctx context.Context, user *database.User, chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	topics, err := h.subRepo.GetUserSubscriptions(ctx, user.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		h.sendMsg(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
		return
	}

	if len(topics) == 0 {
		h.sendMsg(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
	text := "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏:"

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫, –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
	var rows [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	for i, topic := range topics {
		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º–æ–π
		button := tgbotapi.NewInlineKeyboardButtonData(topic, "topic_news_"+topic)
		currentRow = append(currentRow, button)

		// –ï—Å–ª–∏ —É –Ω–∞—Å 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		if len(currentRow) == 2 || i == len(topics)-1 {
			rows = append(rows, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	h.sendMsg(chatID, text, keyboard)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
func (h *Handler) handleTopicNewsCallback(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	user, err := h.getOrCreateUser(callback.From)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
	topic := strings.TrimPrefix(callback.Data, "topic_news_")

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	h.answerCallback(callback, "–ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ '"+topic+"'...")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
	h.sendMsg(callback.Message.Chat.ID, "üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ '"+topic+"'... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ
		articles, err := h.fetchNewsForTopic(ctx, user, topic)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ '%s': %v", topic, err)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
			if strings.Contains(err.Error(), "request limit") || strings.Contains(err.Error(), "rate limit") {
				h.sendMsg(callback.Message.Chat.ID, "‚ùó –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			} else {
				h.sendMsg(callback.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")
			}
			return
		}

		if len(articles) == 0 {
			h.sendMsg(callback.Message.Chat.ID, "üîç –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ '"+topic+"' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
		h.sendMsg(callback.Message.Chat.ID, "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ '"+topic+"':")

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		newsLimit := int(user.NewsLimit)
		if newsLimit <= 0 {
			newsLimit = 5 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		}

		articlesToSend := articles
		if len(articles) > newsLimit {
			articlesToSend = articles[:newsLimit]
		}

		for _, article := range articlesToSend {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
			if err := h.sendArticleWithFavoriteButton(ctx, callback.Message.Chat.ID, user.ID, article); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: %v", err)
				continue
			}
		}
	}()
}

// fetchNewsForTopic –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –ø–æ –¥–∞—Ç–µ –∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º
func (h *Handler) fetchNewsForTopic(ctx context.Context, user *database.User, topic string) ([]fetcher.Article, error) {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ
	articles, err := h.scheduler.FetchNewsForTopic(ctx, topic)
	if err != nil {
		return nil, err
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	return h.filterSentArticles(ctx, user.ID, articles)
}

// filterSentArticles —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Handler) filterSentArticles(ctx context.Context, userID uint, articles []fetcher.Article) ([]fetcher.Article, error) {
	// –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	freshArticles := []fetcher.Article{}
	for _, article := range articles {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
		isSent, err := h.scheduler.IsArticleSent(ctx, userID, article.URL)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏: %v", err)
			continue
		}

		// –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫
		if !isSent {
			freshArticles = append(freshArticles, article)
		}
	}

	return freshArticles, nil
}

// formatArticleMessage —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
func (h *Handler) formatArticleMessage(article fetcher.Article) string {
	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
	publishedDate := article.PublishedAt.Format("02.01.2006 15:04")

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	description := article.Description
	if len(description) > 300 {
		description = description[:297] + "..."
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
	sourceName := article.Source.Name
	if sourceName == "" {
		sourceName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
	}

	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	title := h.sanitizeText(article.Title)
	description = h.sanitizeText(description)
	sourceName = h.sanitizeText(sourceName)

	// –°–æ–∑–¥–∞–µ–º HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	message := fmt.Sprintf(
		"<b>%s</b>\n\n"+ // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
			"%s\n\n"+ // –û–ø–∏—Å–∞–Ω–∏–µ
			"<i>üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: %s</i>\n"+ // –ò—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–∏–≤–æ–º
			"<i>üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: %s</i>\n\n"+ // –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫—É—Ä—Å–∏–≤–æ–º
			"<a href=\"%s\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí</a>", // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é
		title,
		description,
		sourceName,
		publishedDate,
		article.URL,
	)

	return message
}

// handleSearchNews –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"
func (h *Handler) handleSearchNews(ctx context.Context, user *database.User, chatID int64) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	h.setUserState(ctx, user.ID, StateAwaitingSearchQuery, chatID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
	h.sendMsg(chatID, "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∫–æ—Å–º–æ—Å' –∏ —Ç.–¥.")
}

// handleSearchNewsQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *Handler) handleSearchNewsQuery(ctx context.Context, user *database.User, query string, chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
	if strings.TrimSpace(query) == "" {
		h.sendMsg(chatID, "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
	h.sendMsg(chatID, fmt.Sprintf("üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '%s'... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", query))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
		articles, err := h.scheduler.SearchNews(ctx, query)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '%s': %v", query, err)
			if strings.Contains(err.Error(), "request limit") || strings.Contains(err.Error(), "rate limit") {
				h.sendMsg(chatID, "‚ùó –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			} else {
				h.sendMsg(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
			}
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏
		if len(articles) == 0 {
			h.sendMsg(chatID, fmt.Sprintf("üîç –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", query))
			return
		}

		// –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		freshArticles, err := h.filterSentArticles(ctx, user.ID, articles)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: %v", err)
			h.sendMsg(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if len(freshArticles) == 0 {
			h.sendMsg(chatID, fmt.Sprintf("üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '%s' –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Ä–∞–Ω–µ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é.", query))
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
		h.sendMsg(chatID, fmt.Sprintf("üì∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '%s':", query))

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
		newsLimit := int(user.NewsLimit)
		if newsLimit <= 0 {
			newsLimit = 5 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		}

		// –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –±–æ–ª—å—à–µ, —á–µ–º –ª–∏–º–∏—Ç, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ newsLimit
		articlesToSend := freshArticles
		if len(freshArticles) > newsLimit {
			articlesToSend = freshArticles[:newsLimit]
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
		for _, article := range articlesToSend {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
			if err := h.sendArticleWithFavoriteButton(ctx, chatID, user.ID, article); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: %v", err)
				continue
			}

			// –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ç—å—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
			if err := h.scheduler.MarkArticleAsSent(ctx, user.ID, article.URL); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ —Å—Ç–∞—Ç—å–∏ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π: %v", err)
			}
		}

		// –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if len(freshArticles) > newsLimit {
			h.sendMsg(chatID, fmt.Sprintf("‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ %d –∏–∑ %d –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π, –∏–∑–º–µ–Ω–∏—Ç–µ –ª–∏–º–∏—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", newsLimit, len(freshArticles)))
		}
	}()
}

// handleResetHistory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
func (h *Handler) handleResetHistory(ctx context.Context, user *database.User, chatID int64) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
	h.sendMsg(chatID, "üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
		err := h.scheduler.ResetSentArticlesHistory(ctx, user.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: %v", err)
			h.sendMsg(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–±—Ä–æ—Å–µ
		h.sendMsg(chatID, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.")
	}()
}

func (h *Handler) handleUnsubscribeCallback(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	user, err := h.getOrCreateUser(callback.From)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: %v", err)
		h.answerCallback(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	topicToUnsubscribe := strings.TrimPrefix(callback.Data, "unsubscribe_")
	if err := h.subRepo.RemoveSubscription(ctx, user.ID, topicToUnsubscribe); err != nil {
		h.answerCallback(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.")
		return
	}

	responseText := fmt.Sprintf("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã: %s", topicToUnsubscribe)
	h.answerCallback(callback, responseText)
	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, responseText)
	newKeyboard := h.removeButtonFromKeyboard(callback.Message.ReplyMarkup, callback.Data)
	editMsg.ReplyMarkup = newKeyboard
	if _, err := h.bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// --- Helper functions ---

func (h *Handler) createMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		// –ü–µ—Ä–≤—ã–π —Ä—è–¥: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì∞ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"),
			tgbotapi.NewKeyboardButton("üìÉ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º"),
			tgbotapi.NewKeyboardButton("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"),
		),
		// –í—Ç–æ—Ä–æ–π —Ä—è–¥: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),
			tgbotapi.NewKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),
			tgbotapi.NewKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
		),
		// –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
			tgbotapi.NewKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
		),
		// –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–º–æ—â—å
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)
}

func (h *Handler) sendMsg(chatID int64, text string, markup ...interface{}) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	if len(markup) > 0 {
		msg.ReplyMarkup = markup[0]
	}
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (h *Handler) setUserState(ctx context.Context, userID uint, state string, chatID int64) {
	if err := h.userRepo.SetUserState(ctx, userID, state); err != nil {
		log.Printf("Failed to set user state for user %d: %v", userID, err)
		h.sendMsg(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}
}

func (h *Handler) createUnsubscribeKeyboard(topics []string) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, topic := range topics {
		button := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚ùå %s", topic), "unsubscribe_"+topic)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func (h *Handler) answerCallback(callback *tgbotapi.CallbackQuery, text string) {
	answer := tgbotapi.NewCallback(callback.ID, text)
	if _, err := h.bot.Request(answer); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
}

func (h *Handler) removeButtonFromKeyboard(keyboard *tgbotapi.InlineKeyboardMarkup, buttonData string) *tgbotapi.InlineKeyboardMarkup {
	if keyboard == nil {
		return nil
	}
	var newRows [][]tgbotapi.InlineKeyboardButton
	for _, row := range keyboard.InlineKeyboard {
		var newRow []tgbotapi.InlineKeyboardButton
		for _, button := range row {
			if button.CallbackData == nil || *button.CallbackData != buttonData {
				newRow = append(newRow, button)
			}
		}
		if len(newRow) > 0 {
			newRows = append(newRows, newRow)
		}
	}
	if len(newRows) == 0 {
		return nil // If no buttons are left, remove the keyboard
	}
	newMarkup := tgbotapi.NewInlineKeyboardMarkup(newRows...)
	return &newMarkup
}

// sanitizeText –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram API
func (h *Handler) sanitizeText(text string) string {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø–∞–∫–µ—Ç–∞ utils
	return utils.SanitizeText(text)
}

package utils

import (
	"crypto/md5"
	"encoding/hex"
	"strings"
)

// CreateShortID создает короткий идентификатор из URL или другой строки.
// Использует MD5-хеш и возвращает последние 10 символов для уникальности.
func CreateShortID(input string) string {
	if len(input) == 0 {
		return ""
	}

	// Если строка короткая (меньше 10 символов), возвращаем её как есть
	if len(input) <= 10 {
		return input
	}

	// Для более надежной идентификации используем MD5-хеш
	// вместо простого обрезания строки
	hasher := md5.New()
	hasher.Write([]byte(input))
	hash := hex.EncodeToString(hasher.Sum(nil))

	// Возвращаем последние 10 символов хеша для краткости
	return hash[len(hash)-10:]
}

// SanitizeText очищает текст от некорректных символов для безопасной отправки в Telegram API.
// Поддерживает кириллицу, латиницу, цифры, эмодзи и основные знаки пунктуации.
func SanitizeText(text string) string {
	// Если текст пустой, возвращаем "Неизвестно"
	if text == "" {
		return "Неизвестно"
	}

	// Создаем новую строку, содержащую только валидные символы
	var result []rune
	for _, r := range text {
		// Проверяем, является ли символ допустимым
		// Допустимые символы:
		// - Буквы (латиница, кириллица и др.)
		// - Цифры
		// - Пробелы и знаки пунктуации
		// - Эмодзи и другие специальные символы
		if (r >= 32 && r <= 126) || // Базовые ASCII символы
			(r >= 1040 && r <= 1103) || // Кириллица
			r == 1025 || r == 1105 || // Ё и ё
			(r >= 9 && r <= 13) || // Табуляция, перевод строки и др.
			(r == 171 || r == 187) || // Кавычки-елочки
			(r >= 8192 && r <= 8303) || // Пунктуация и символы
			(r >= 8352 && r <= 8399) || // Символы валют
			(r >= 8448 && r <= 8527) || // Буквоподобные символы
			(r >= 8592 && r <= 8703) || // Стрелки и математические операторы
			(r >= 9728 && r <= 11263) || // Различные символы и эмодзи (расширенный диапазон)
			(r >= 12288 && r <= 12351) || // Японские символы
			(r >= 65280 && r <= 65519) || // Полноширинные формы
			(r >= 127744 && r <= 128591) || // Эмодзи (основной блок)
			(r >= 128640 && r <= 128767) || // Дополнительные эмодзи
			(r >= 129280 && r <= 129535) { // Дополнительные эмодзи и символы
			result = append(result, r)
		} else {
			// Заменяем недопустимые символы на пробел
			result = append(result, ' ')
		}
	}

	// Преобразуем результат обратно в строку
	sanitized := string(result)

	// Заменяем множественные пробелы на один
	for i := 0; i < 5; i++ {
		sanitized = strings.Replace(sanitized, "  ", " ", -1)
	}

	// Если после очистки текст пустой, возвращаем "Неизвестно"
	if strings.TrimSpace(sanitized) == "" {
		return "Неизвестно"
	}

	return sanitized
}

package scheduler

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/database"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/fetcher"
	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/utils"
)

// Scheduler —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ—Å—Ç–µ–π.
// –û–Ω –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ä–∞—Å—Å—ã–ª–∞—Ç—å –∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
type Scheduler struct {
	bot                 *tgbotapi.BotAPI
	userRepo            database.UserRepository
	subRepo             database.SubscriptionRepository
	sentArticleRepo     database.SentArticleRepository
	favoriteArticleRepo database.FavoriteArticleRepository
	fetcher             *fetcher.Fetcher
	interval            time.Duration
	stop                chan struct{}
	sentArticles        map[string]map[string]bool // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ë–î)
}

// NewScheduler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
func NewScheduler(
	bot *tgbotapi.BotAPI,
	userRepo database.UserRepository,
	subRepo database.SubscriptionRepository,
	sentArticleRepo database.SentArticleRepository,
	favoriteArticleRepo database.FavoriteArticleRepository,
	fetcher *fetcher.Fetcher,
	interval time.Duration,
) *Scheduler {
	return &Scheduler{
		bot:                 bot,
		userRepo:            userRepo,
		subRepo:             subRepo,
		sentArticleRepo:     sentArticleRepo,
		favoriteArticleRepo: favoriteArticleRepo,
		fetcher:             fetcher,
		interval:            interval,
		stop:                make(chan struct{}),
		sentArticles:        make(map[string]map[string]bool),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ.
func (s *Scheduler) Start() {
	log.Println("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º:", s.interval)
	ticker := time.NewTicker(s.interval)

	go func() {
		for {
			select {
			case <-ticker.C:
				s.sendNewsUpdates()
			case <-s.stop:
				ticker.Stop()
				log.Println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
				return
			}
		}
	}()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
func (s *Scheduler) Stop() {
	close(s.stop)
}

// IsArticleSent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func (s *Scheduler) IsArticleSent(ctx context.Context, userID uint, articleURL string) (bool, error) {
	return s.isArticleSent(ctx, userID, articleURL), nil
}

// isArticleSent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.
func (s *Scheduler) isArticleSent(ctx context.Context, userID uint, articleURL string) bool {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à —Å—Ç–∞—Ç—å–∏ –∏–∑ URL
	articleHash := articleURL

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
	sent, err := s.sentArticleRepo.IsArticleSent(ctx, userID, articleHash)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—å–∏ –≤ –ë–î: %v", err)
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
		topicKey := fmt.Sprintf("%d:%s", userID, articleHash)
		if _, ok := s.sentArticles[topicKey]; !ok {
			return false
		}
		return s.sentArticles[topicKey][articleURL]
	}

	return sent
}

// MarkArticleAsSent –ø–æ–º–µ—á–∞–µ—Ç —Å—Ç–∞—Ç—å—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (s *Scheduler) MarkArticleAsSent(ctx context.Context, userID uint, articleURL string) error {
	// –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î
	err := s.sentArticleRepo.MarkArticleAsSent(ctx, userID, articleURL)
	if err != nil {
		return err
	}

	// –ü–æ–º–µ—á–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
	s.markArticleAsSent(ctx, userID, articleURL)
	return nil
}

// formatArticleMessage —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
func (s *Scheduler) formatArticleMessage(article fetcher.Article) string {
	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
	publishedDate := article.PublishedAt.Format("02.01.2006 15:04")

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	description := article.Description
	if len(description) > 300 {
		description = description[:297] + "..."
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
	sourceName := article.Source.Name
	if sourceName == "" {
		sourceName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
	}

	// –°–æ–∑–¥–∞–µ–º HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	message := fmt.Sprintf(
		"<b>%s</b>\n\n"+ // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
			"%s\n\n"+ // –û–ø–∏—Å–∞–Ω–∏–µ
			"<i>üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: %s</i>\n"+ // –ò—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–∏–≤–æ–º
			"<i>üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: %s</i>\n\n"+ // –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫—É—Ä—Å–∏–≤–æ–º
			"<a href=\"%s\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí</a>", // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é
		article.Title,
		description,
		sourceName,
		publishedDate,
		article.URL,
	)

	return message
}

// ResetSentArticlesHistory —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *Scheduler) ResetSentArticlesHistory(ctx context.Context, userID uint) error {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ë–î
	err := s.sentArticleRepo.ResetSentArticlesHistory(ctx, userID)
	if err != nil {
		return err
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
	userIDStr := fmt.Sprintf("%d", userID)
	s.sentArticles[userIDStr] = make(map[string]bool)

	return nil
}

// markArticleAsSent –ø–æ–º–µ—á–∞–µ—Ç —Å—Ç–∞—Ç—å—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (s *Scheduler) markArticleAsSent(ctx context.Context, userID uint, articleURL string) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à —Å—Ç–∞—Ç—å–∏ –∏–∑ URL
	articleHash := articleURL

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err := s.sentArticleRepo.MarkArticleAsSent(ctx, userID, articleHash)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –≤ –ë–î: %v", err)
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
		topicKey := fmt.Sprintf("%d:%s", userID, articleHash)
		if _, ok := s.sentArticles[topicKey]; !ok {
			s.sentArticles[topicKey] = make(map[string]bool)
		}

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Ä–æ—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
		const maxCacheSize = 100
		if len(s.sentArticles[topicKey]) >= maxCacheSize {
			// –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∫–∏: —É–¥–∞–ª—è–µ–º –∫—ç—à –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ.
			s.sentArticles[topicKey] = make(map[string]bool)
		}

		s.sentArticles[topicKey][articleURL] = true
	}
}

// sendNewsUpdates –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É: –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö.
func (s *Scheduler) sendNewsUpdates() {
	ctx := context.Background()
	log.Println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–∞—á–∏–Ω–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

	users, err := s.userRepo.GetAllUsers(ctx)
	if err != nil {
		log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return
	}

	log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", len(users))

	var wg sync.WaitGroup
	newsSentCount := 0
	mu := &sync.Mutex{}

	for _, user := range users {
		wg.Add(1)
		go func(u database.User) {
			defer wg.Done()
			foundNewsCount := s.ProcessUser(ctx, u, false) // –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
			mu.Lock()
			newsSentCount += foundNewsCount
			mu.Unlock()
		}(user)
	}
	wg.Wait()

	log.Println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}

// FetchNewsForTopic –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ.
func (s *Scheduler) FetchNewsForTopic(ctx context.Context, topic string) ([]fetcher.Article, error) {
	return s.fetcher.FetchNews(topic)
}

// SearchNews –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
func (s *Scheduler) SearchNews(ctx context.Context, query string) ([]fetcher.Article, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ FetchNews, —á—Ç–æ –∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–º–µ
	return s.fetcher.FetchNews(query)
}

// AddFavoriteArticle –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (s *Scheduler) AddFavoriteArticle(ctx context.Context, userID uint, article fetcher.Article) error {
	return s.favoriteArticleRepo.AddFavoriteArticle(
		ctx,
		userID,
		article.URL,
		article.Title,
		article.Source.Name,
		article.PublishedAt,
	)
}

// RemoveFavoriteArticle —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (s *Scheduler) RemoveFavoriteArticle(ctx context.Context, userID uint, articleURL string) error {
	return s.favoriteArticleRepo.RemoveFavoriteArticle(ctx, userID, articleURL)
}

// GetUserFavoriteArticles –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (s *Scheduler) GetUserFavoriteArticles(ctx context.Context, userID uint) ([]database.FavoriteArticle, error) {
	return s.favoriteArticleRepo.GetUserFavoriteArticles(ctx, userID)
}

// IsFavoriteArticle –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (s *Scheduler) IsFavoriteArticle(ctx context.Context, userID uint, articleURL string) (bool, error) {
	return s.favoriteArticleRepo.IsFavoriteArticle(ctx, userID, articleURL)
}

// sendArticleWithFavoriteButton –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é —Å –∫–Ω–æ–ø–∫–æ–π "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
func (s *Scheduler) sendArticleWithFavoriteButton(ctx context.Context, chatID int64, userID uint, article fetcher.Article) error {
	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	messageText := s.formatArticleMessage(article)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
	isFavorite, err := s.IsFavoriteArticle(ctx, userID, article.URL)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏: %v", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è URL —Å—Ç–∞—Ç—å–∏
	shortID := utils.CreateShortID(article.URL)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏–ª–∏ "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
	var keyboard tgbotapi.InlineKeyboardMarkup
	if isFavorite {
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "rm_fav_"+shortID),
			),
		)
	} else {
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "add_fav_"+shortID),
			),
		)
	}

	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	sanitizedText := utils.SanitizeText(messageText)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(chatID, sanitizedText)
	msg.ParseMode = tgbotapi.ModeHTML
	msg.DisableWebPagePreview = false
	msg.ReplyMarkup = keyboard

	if _, err := s.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: %v", err)
		return err
	}

	return nil
}

// ProcessUser –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ–º—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞–º.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
func (s *Scheduler) ProcessUser(ctx context.Context, user database.User, force bool) int {
	now := time.Now()
	interval := time.Duration(user.NotificationIntervalMinutes) * time.Minute

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫)
	if !force && user.LastNotifiedAt != nil && now.Sub(*user.LastNotifiedAt) < interval {
		// –ï—â–µ –Ω–µ –≤—Ä–µ–º—è
		return 0
	}

	log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d (TelegramID: %d)", user.ID, user.TelegramID)

	topics, err := s.subRepo.GetUserSubscriptions(ctx, user.ID)
	if err != nil {
		log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", user.ID, err)
		return 0
	}

	if len(topics) == 0 {
		// –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
		return 0
	}

	var allFreshArticles []fetcher.Article
	newsFilterThreshold := time.Hour * 24 * 183 // 183 –¥–Ω—è (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–ª–≥–æ–¥–∞)

	for _, topic := range topics {
		articles, err := s.fetcher.FetchNews(topic)
		if err != nil {
			log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ–º—ã '%s': %v", topic, err)
			continue
		}

		for _, article := range articles {
			if now.Sub(article.PublishedAt) < newsFilterThreshold && !s.isArticleSent(ctx, user.ID, article.URL) {
				allFreshArticles = append(allFreshArticles, article)
				s.markArticleAsSent(ctx, user.ID, article.URL)
			}
		}
	}

	if len(allFreshArticles) == 0 {
		log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", user.ID)
		// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
		if err := s.userRepo.UpdateUserLastNotifiedAt(ctx, user.ID, now); err != nil {
			log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", user.ID, err)
		}
		return 0
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	newsLimit := int(user.NewsLimit)
	if newsLimit <= 0 {
		newsLimit = 5 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –±–∞–∑–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
	articlesToSend := allFreshArticles
	if len(allFreshArticles) > newsLimit {
		articlesToSend = allFreshArticles[:newsLimit]
	}

	for _, article := range articlesToSend {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ sendArticleWithFavoriteButton –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–Ω–æ–ø–∫–æ–π "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
		if err := s.sendArticleWithFavoriteButton(ctx, user.TelegramID, user.ID, article); err != nil {
			log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID %d: %v", user.ID, err)
			continue
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	if err := s.userRepo.UpdateUserLastNotifiedAt(ctx, user.ID, now); err != nil {
		log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", user.ID, err)
	}

	log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID %d.", len(allFreshArticles), user.ID)

	return len(allFreshArticles)
}

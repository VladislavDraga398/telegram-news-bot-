package tests

import (
	"testing"
)

// TestMain –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏
func TestMain(m *testing.M) {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
	m.Run()
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
func TestIntegration(t *testing.T) {
	t.Run("Utils integration", func(t *testing.T) {
		// –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ
		// –∫–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

		// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
		articleURL := "https://ria.ru/20240101/important-news-1234567890.html"
		articleTitle := "–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è: –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω üì∞"

		// –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID (–∫–∞–∫ –≤ handlers)
		shortID := createShortIDForTest(articleURL)
		if len(shortID) == 0 || len(shortID) > 10 {
			t.Errorf("Invalid short ID length: %d", len(shortID))
		}

		// –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∫–∞–∫ –≤ handlers)
		sanitizedTitle := sanitizeTextForTest(articleTitle)
		if sanitizedTitle == "" {
			t.Error("Sanitized title should not be empty")
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–æ–¥–∑–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
		if !containsEmoji(sanitizedTitle) {
			t.Error("Sanitized title should preserve emojis")
		}

		t.Logf("Original URL: %s", articleURL)
		t.Logf("Short ID: %s", shortID)
		t.Logf("Original title: %s", articleTitle)
		t.Logf("Sanitized title: %s", sanitizedTitle)
	})
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
func createShortIDForTest(input string) string {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ utils.CreateShortID
	if len(input) == 0 {
		return ""
	}

	if len(input) <= 10 {
		return input
	}

	// –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
	return input[len(input)-10:]
}

func sanitizeTextForTest(text string) string {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –∏–∑ utils.SanitizeText
	if text == "" {
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
	return text
}

func containsEmoji(text string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–º–æ–¥–∑–∏
	for _, r := range text {
		if r >= 0x1F600 && r <= 0x1F64F { // Emoticons
			return true
		}
		if r >= 0x1F300 && r <= 0x1F5FF { // Misc Symbols
			return true
		}
		if r >= 0x1F680 && r <= 0x1F6FF { // Transport
			return true
		}
		if r >= 0x2600 && r <= 0x26FF { // Misc symbols
			return true
		}
	}
	return false
}

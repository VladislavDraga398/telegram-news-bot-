package utils_test

import (
	"strings"
	"testing"

	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/utils"
)

func TestCreateShortID(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "Empty string",
			input:    "",
			expected: "",
		},
		{
			name:     "Short string",
			input:    "short",
			expected: "short",
		},
		{
			name:     "Exactly 10 characters",
			input:    "1234567890",
			expected: "1234567890",
		},
		{
			name:  "Long URL",
			input: "https://example.com/very/long/path/to/article",
			// –î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ MD5-—Ö–µ—à–∞
		},
		{
			name:  "Russian URL",
			input: "https://example.com/—Å—Ç–∞—Ç—å—è",
			// –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := utils.CreateShortID(tt.input)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤
			if len(result) > 10 {
				t.Errorf("CreateShortID() returned string longer than 10 characters: %d", len(result))
			}

			// –î–ª—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –æ–∂–∏–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			if tt.input == "" && result != "" {
				t.Errorf("CreateShortID() for empty string should return empty string, got: %s", result)
			}

			// –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫ –æ–∂–∏–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
			if len(tt.input) <= 10 && tt.input != "" && result != tt.input {
				t.Errorf("CreateShortID() for short string should return original string, got: %s, expected: %s", result, tt.input)
			}

			// –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –æ–∂–∏–¥–∞–µ–º —Ö–µ—à
			if len(tt.input) > 10 && len(result) != 10 {
				t.Errorf("CreateShortID() for long string should return 10-character hash, got length: %d", len(result))
			}
		})
	}
}

func TestCreateShortIDConsistency(t *testing.T) {
	// –¢–µ—Å—Ç –Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	input := "https://example.com/very/long/path/to/article/with/many/segments"

	result1 := utils.CreateShortID(input)
	result2 := utils.CreateShortID(input)

	if result1 != result2 {
		t.Errorf("CreateShortID() should be consistent, got %s and %s for same input", result1, result2)
	}
}

func TestCreateShortIDUniqueness(t *testing.T) {
	// –¢–µ—Å—Ç –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å - —Ä–∞–∑–Ω—ã–µ –≤—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	inputs := []string{
		"https://example.com/article1",
		"https://example.com/article2",
		"https://example.com/different/path",
		"https://another-domain.com/article",
	}

	results := make(map[string]bool)

	for _, input := range inputs {
		result := utils.CreateShortID(input)
		if results[result] {
			t.Errorf("CreateShortID() produced duplicate result %s for different inputs", result)
		}
		results[result] = true
	}
}

func TestSanitizeText(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "Empty string",
			input:    "",
			expected: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
		},
		{
			name:     "Normal text",
			input:    "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
			expected: "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
		},
		{
			name:     "Text with emojis",
			input:    "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòÄ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
			expected: "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòÄ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
		},
		{
			name:     "Text with invalid characters",
			input:    "–¢–µ–∫—Å—Ç\x00—Å\x01–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏\x02—Å–∏–º–≤–æ–ª–∞–º–∏",
			expected: "–¢–µ–∫—Å—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
		},
		{
			name:     "Multiple spaces",
			input:    "–¢–µ–∫—Å—Ç    —Å     –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏    –ø—Ä–æ–±–µ–ª–∞–º–∏",
			expected: "–¢–µ–∫—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏",
		},
		{
			name:     "Only spaces",
			input:    "   ",
			expected: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
		},
		{
			name:     "Mixed languages",
			input:    "Mixed —Ä—É—Å—Å–∫–∏–π English —Ç–µ–∫—Å—Ç",
			expected: "Mixed —Ä—É—Å—Å–∫–∏–π English —Ç–µ–∫—Å—Ç",
		},
		{
			name:     "Special punctuation",
			input:    "–¢–µ–∫—Å—Ç —Å ¬´–∫–∞–≤—ã—á–∫–∞–º–∏¬ª –∏ —Ç–∏—Ä–µ ‚Äî —Ç–æ—á–∫–∞–º–∏‚Ä¶",
			expected: "–¢–µ–∫—Å—Ç —Å ¬´–∫–∞–≤—ã—á–∫–∞–º–∏¬ª –∏ —Ç–∏—Ä–µ ‚Äî —Ç–æ—á–∫–∞–º–∏‚Ä¶",
		},
		{
			name:     "Numbers and symbols",
			input:    "–¶–µ–Ω–∞: 1000‚ÇΩ, —Å–∫–∏–¥–∫–∞ 50%",
			expected: "–¶–µ–Ω–∞: 1000‚ÇΩ, —Å–∫–∏–¥–∫–∞ 50%",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := utils.SanitizeText(tt.input)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
			if result == "" {
				t.Errorf("SanitizeText() should never return empty string, got empty for input: %q", tt.input)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
			if strings.Contains(result, "  ") {
				t.Errorf("SanitizeText() should not contain multiple spaces, got: %q", result)
			}

			// –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
			if tt.expected != "" && result != tt.expected {
				t.Errorf("SanitizeText() = %q, expected %q", result, tt.expected)
			}
		})
	}
}

func TestSanitizeTextUTF8Validity(t *testing.T) {
	// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UTF-8
	invalidUTF8 := []byte{0xff, 0xfe, 0xfd}
	input := "–¢–µ–∫—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º UTF-8: " + string(invalidUTF8)

	result := utils.SanitizeText(input)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UTF-8
	if !isValidUTF8(result) {
		t.Errorf("SanitizeText() should always return valid UTF-8, got invalid UTF-8: %q", result)
	}
}

func TestSanitizeTextPreservesImportantContent(t *testing.T) {
	// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –≤–∞–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
	tests := []struct {
		name  string
		input string
	}{
		{
			name:  "News headline",
			input: "–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª –∑–∞–∫–æ–Ω –æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∞—Ö",
		},
		{
			name:  "Article with quotes",
			input: "–≠–∫—Å–ø–µ—Ä—Ç –∑–∞—è–≤–∏–ª: ¬´–≠—Ç–æ –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏¬ª",
		},
		{
			name:  "Text with percentages",
			input: "–†–æ—Å—Ç —Å–æ—Å—Ç–∞–≤–∏–ª 15% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := utils.SanitizeText(tt.input)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
			words := strings.Fields(tt.input)
			for _, word := range words {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
				if len(word) > 2 && !strings.ContainsAny(word, ".,!?:;") {
					if !strings.Contains(result, word) {
						t.Errorf("SanitizeText() should preserve important word %q, result: %q", word, result)
					}
				}
			}
		})
	}
}

// isValidUTF8 –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º UTF-8
func isValidUTF8(s string) bool {
	for _, r := range s {
		if r == '\uFFFD' {
			// –ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª –∑–∞–º–µ—â–µ–Ω–∏—è, —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π UTF-8
			return false
		}
	}
	return true
}

func BenchmarkCreateShortID(b *testing.B) {
	input := "https://example.com/very/long/path/to/article/with/many/segments/and/parameters?param1=value1&param2=value2"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		utils.CreateShortID(input)
	}
}

func BenchmarkSanitizeText(b *testing.B) {
	input := "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã 123, —ç–º–æ–¥–∑–∏ üòÄ, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è... –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã!"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		utils.SanitizeText(input)
	}
}

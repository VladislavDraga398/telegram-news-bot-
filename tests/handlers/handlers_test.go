package handlers_test

import (
	"testing"

	"github.com/vladislavdragonenkov/news-telegram-bot/internal/bot/utils"
)

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é handlers —Å utils
func TestHandlerTextSanitization(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "Normal news title",
			input:    "–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è",
			expected: "–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è",
		},
		{
			name:     "Title with emojis",
			input:    "üî• –ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì∞",
			expected: "üî• –ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì∞",
		},
		{
			name:     "Empty title",
			input:    "",
			expected: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
		},
		{
			name:     "Title with invalid UTF-8",
			input:    "–ù–æ–≤–æ—Å—Ç–∏\x00—Å\x01–ø—Ä–æ–±–ª–µ–º–∞–º–∏",
			expected: "–ù–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := utils.SanitizeText(tt.input)
			if result != tt.expected {
				t.Errorf("SanitizeText() = %q, expected %q", result, tt.expected)
			}
		})
	}
}

func TestShortIDGeneration(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö URL –Ω–æ–≤–æ—Å—Ç–µ–π
	newsURLs := []string{
		"https://ria.ru/20240101/news-1234567890.html",
		"https://tass.ru/obschestvo/12345678",
		"https://lenta.ru/news/2024/01/01/important/",
		"https://interfax.ru/russia/123456",
	}

	ids := make(map[string]bool)

	for _, url := range newsURLs {
		shortID := utils.CreateShortID(url)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
		if len(shortID) > 10 {
			t.Errorf("Short ID too long: %s (length: %d)", shortID, len(shortID))
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
		if ids[shortID] {
			t.Errorf("Duplicate short ID generated: %s", shortID)
		}
		ids[shortID] = true

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π
		if shortID == "" {
			t.Errorf("Empty short ID generated for URL: %s", url)
		}
	}
}

func TestCallbackDataFormat(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫
	testURL := "https://example.com/very/long/news/article/url"
	shortID := utils.CreateShortID(testURL)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã callback –¥–∞–Ω–Ω—ã—Ö
	prefixes := []string{"add_fav_", "rm_fav_"}

	for _, prefix := range prefixes {
		callbackData := prefix + shortID

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç Telegram (64 –±–∞–π—Ç–∞)
		if len(callbackData) > 64 {
			t.Errorf("Callback data too long: %s (length: %d)", callbackData, len(callbackData))
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
		if callbackData[:len(prefix)] != prefix {
			t.Errorf("Callback data should start with %s, got: %s", prefix, callbackData)
		}
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
func BenchmarkTextProcessing(b *testing.B) {
	longText := `–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: 
	–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã 123, —ç–º–æ–¥–∑–∏ üòÄ, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è... 
	–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã! –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é 
	—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º.`

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		utils.SanitizeText(longText)
	}
}

func BenchmarkShortIDGeneration(b *testing.B) {
	longURL := "https://example.com/very/long/news/article/url/with/many/segments/and/parameters?param1=value1&param2=value2&param3=value3"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		utils.CreateShortID(longURL)
	}
}
